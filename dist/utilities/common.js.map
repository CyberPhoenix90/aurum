{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/utilities/common.ts"],"names":[],"mappings":"","sourcesContent":["import { DataSource } from '../stream/data_source';\r\nimport { DuplexDataSource } from '../stream/duplex_data_source';\r\n\r\nexport type AttributeValue = string | DataSource<string> | DataSource<boolean> | boolean ;\r\nexport type StringSource = string | DataSource<string>;\r\nexport type ClassType = string | DataSource<string> | DataSource<string[]> | Array<string | DataSource<string>>;\r\n/**\r\n * Type alias for a generic calback taking a parameter and not returning anything\r\n */\r\nexport type Callback<T> = (data?: T) => void;\r\nexport type Delegate = () => void;\r\nexport type Predicate<T> = (data: T) => boolean;\r\nexport type Provider<T> = () => T;\r\nexport type Comparator<T1, T2> = (value1: T1, value2: T2) => boolean;\r\nexport type Constructor<T> = new (...args: any[]) => T;\r\nexport type MapLike<T> = { [key: string]: T };\r\n\r\nexport type DataDrain<T> = Callback<T> | DataSource<T> | DuplexDataSource<T>;\r\nexport type ThenArg<T> = T extends PromiseLike<infer U> ? U : T;\r\n"]}