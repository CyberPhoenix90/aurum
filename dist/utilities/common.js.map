{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/utilities/common.ts"],"names":[],"mappings":"","sourcesContent":["import { DataSource } from '../stream/data_source';\n\nexport type StringSource = string | DataSource<string>;\nexport type ClassType = string | DataSource<string> | DataSource<string[]> | Array<string | DataSource<string>>;\n\nexport type Callback<T> = (data?: T) => void;\nexport type Delegate = () => void;\nexport type Predicate<T> = (data: T) => boolean;\nexport type Provider<T> = () => T;\nexport type Comparator<T1, T2> = (value1: T1, value2: T2) => boolean;\nexport type Constructor<T> = new (...args: any[]) => T;\nexport type MapLike<T> = { [key: string]: T };\nexport type Primitive = number | string | boolean | null | undefined;\nexport type JSONObject<T> = { [key: string]: T | JSONObject<T> };\nexport type ValueOrProvider<T> = T | Provider<T>;\nexport type ValueOrArray<T> = T | T[];\n\nexport interface PointLike {\n\tx: number;\n\ty: number;\n}\n\nexport type DataDrain<T> = Callback<T> | DataSource<T>;\n"]}