{"version":3,"file":"select.js","sourceRoot":"","sources":["../../src/nodes/select.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAqB,MAAM,iBAAiB,CAAC;AAalE,MAAM,YAAY,GAAG,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;AAC5C,MAAM,OAAO,MAAO,SAAQ,YAAY;IAKvC,YAAY,KAAkB;;QAC7B,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QACvB,IAAI,KAAK,KAAK,IAAI,EAAE;YACnB,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;YAC9C,IAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,gBAAgB,CAAC;YAE/C,IAAI,KAAK,CAAC,mBAAmB,EAAE;gBAC9B,IAAI,CAAC,mBAAmB,GAAG,KAAK,CAAC,mBAAmB,CAAC;gBACrD,KAAK,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,eAAe,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;aACzH;iBAAM;gBACN,IAAI,CAAC,IAAI,CAAC,aAAa,SAAG,KAAK,CAAC,gBAAgB,uCAAI,CAAC,CAAC,EAAA,CAAC;aACvD;YAED,IAAI,KAAK,CAAC,mBAAmB,EAAE;gBAC9B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,GAAG,EAAE;oBACzC,KAAK,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;gBAC3D,CAAC,CAAC,CAAC;aACH;SACD;IACF,CAAC;IAES,YAAY;QACrB,KAAK,CAAC,YAAY,EAAE,CAAC;QACrB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC7B,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;SACzD;aAAM,IAAI,IAAI,CAAC,gBAAgB,KAAK,SAAS,EAAE;YAC/C,IAAI,CAAC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,gBAAgB,CAAC;SAChD;IACF,CAAC;CACD","sourcesContent":["import { Callback, DataDrain } from '../utilities/common';\nimport { AurumElement, AurumElementProps } from './aurum_element';\nimport { DataSource } from '../stream/data_source';\n\nexport interface SelectProps extends AurumElementProps {\n\tonAttach?: Callback<Select>;\n\tonDetach?: Callback<Select>;\n\tonCreate?: Callback<Select>;\n\tonDispose?: Callback<Select>;\n\tonChange?: DataDrain<Event>;\n\tinitialSelection?: number;\n\tselectedIndexSource?: DataSource<number>;\n}\n\nconst selectEvents = { change: 'onChange' };\nexport class Select extends AurumElement {\n\tpublic readonly node: HTMLSelectElement;\n\tprivate selectedIndexSource: DataSource<number>;\n\tprivate initialSelection: number;\n\n\tconstructor(props: SelectProps) {\n\t\tsuper(props, 'select');\n\t\tif (props !== null) {\n\t\t\tthis.createEventHandlers(selectEvents, props);\n\t\t\tthis.initialSelection = props.initialSelection;\n\n\t\t\tif (props.selectedIndexSource) {\n\t\t\t\tthis.selectedIndexSource = props.selectedIndexSource;\n\t\t\t\tprops.selectedIndexSource.unique().listenAndRepeat((value) => (this.node.selectedIndex = value), this.cancellationToken);\n\t\t\t} else {\n\t\t\t\tthis.node.selectedIndex = props.initialSelection ?? -1;\n\t\t\t}\n\n\t\t\tif (props.selectedIndexSource) {\n\t\t\t\tthis.node.addEventListener('change', () => {\n\t\t\t\t\tprops.selectedIndexSource.update(this.node.selectedIndex);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected handleAttach() {\n\t\tsuper.handleAttach();\n\t\tif (this.selectedIndexSource) {\n\t\t\tthis.node.selectedIndex = this.selectedIndexSource.value;\n\t\t} else if (this.initialSelection !== undefined) {\n\t\t\tthis.node.selectedIndex = this.initialSelection;\n\t\t}\n\t}\n}\n"]}