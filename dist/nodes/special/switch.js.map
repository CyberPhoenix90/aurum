{"version":3,"file":"switch.js","sourceRoot":"","sources":["../../../src/nodes/special/switch.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgC,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAO1E,MAAM,kBAAkB,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;AAShD,MAAM,UAAU,MAAM,CAAc,KAAqB,EAAE,QAAQ;IAClE,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;IACnC,IAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;KAC9D;IACD,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;QACjD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;KACrE;IAED,OAAO,KAAK,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;AACzE,CAAC;AAED,SAAS,UAAU,CAAI,KAAQ,EAAE,QAAiC;;IACjE,kBAAO,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,CAAC,0CAAE,OAAO,6CAAI,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,0CAAE,OAAO,EAAC;AACrG,CAAC;AAMD,MAAM,UAAU,UAAU,CAAI,KAAyB,EAAE,QAAQ;IAChE,OAAO;QACN,CAAC,kBAAkB,CAAC,EAAE,IAAI;QAC1B,OAAO,EAAE,QAAQ;QACjB,OAAO,EAAE,KAAK;QACd,KAAK,EAAE,KAAK,CAAC,IAAI;KACjB,CAAC;AACH,CAAC;AAED,MAAM,UAAU,iBAAiB,CAAC,KAAS,EAAE,QAAQ;IACpD,OAAO;QACN,CAAC,kBAAkB,CAAC,EAAE,IAAI;QAC1B,OAAO,EAAE,QAAQ;QACjB,OAAO,EAAE,IAAI;QACb,KAAK,EAAE,SAAS;KAChB,CAAC;AACH,CAAC","sourcesContent":["import { AurumElementProps, ChildNode, prerender } from './aurum_element';\nimport { DataSource } from '../../stream/data_source';\n\nexport interface SwitchProps<T = boolean> extends AurumElementProps {\n\tstate: DataSource<T>;\n}\n\nconst switchCaseIdentity = Symbol('switchCase');\n\nexport interface SwitchCaseInstance<T> {\n\t[switchCaseIdentity]: boolean;\n\tvalue: T;\n\tdefault: boolean;\n\tcontent: ChildNode[];\n}\n\nexport function Switch<T = boolean>(props: SwitchProps<T>, children) {\n\tchildren = children.map(prerender);\n\tif (children.some((c) => !c[switchCaseIdentity])) {\n\t\tthrow new Error('Switch only accepts SwitchCase as children');\n\t}\n\tif (children.filter((c) => c.default).length > 1) {\n\t\tthrow new Error('Too many default switch cases only 0 or 1 allowed');\n\t}\n\n\treturn props.state.unique().map((state) => selectCase(state, children));\n}\n\nfunction selectCase<T>(state: T, children: SwitchCaseInstance<T>[]) {\n\treturn children.find((c) => c.value === state)?.content ?? children.find((p) => p.default)?.content;\n}\n\nexport interface SwitchCaseProps<T> {\n\twhen: T;\n}\n\nexport function SwitchCase<T>(props: SwitchCaseProps<T>, children): SwitchCaseInstance<T> {\n\treturn {\n\t\t[switchCaseIdentity]: true,\n\t\tcontent: children,\n\t\tdefault: false,\n\t\tvalue: props.when\n\t};\n}\n\nexport function DefaultSwitchCase(props: {}, children): SwitchCaseInstance<any> {\n\treturn {\n\t\t[switchCaseIdentity]: true,\n\t\tcontent: children,\n\t\tdefault: true,\n\t\tvalue: undefined\n\t};\n}\n"]}