{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../src/nodes/textarea.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAqB,MAAM,iBAAiB,CAAC;AAelE,MAAM,OAAO,QAAS,SAAQ,YAAY;IAMzC,YAAY,KAAoB;;QAC/B,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACzB,IAAI,KAAK,CAAC,gBAAgB,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,eAAG,KAAK,CAAC,YAAY,uCAAI,KAAK,CAAC,gBAAgB,CAAC,KAAK,yCAAI,EAAE,EAAA,CAAC;YAC3E,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,CAAC;SACrG;aAAM;YACN,IAAI,CAAC,IAAI,CAAC,KAAK,SAAG,KAAK,CAAC,YAAY,uCAAI,EAAE,EAAA,CAAC;SAC3C;QACD,IAAI,CAAC,SAAS,CAAC,CAAC,aAAa,EAAE,UAAU,EAAE,UAAU,CAAC,EAAE,KAAK,CAAC,CAAC;QAC/D,IAAI,CAAC,mBAAmB,CAAC,CAAC,OAAO,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;QAErD,IAAI,KAAK,CAAC,gBAAgB,EAAE;YAC3B,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;SACtE;IACF,CAAC;CACD","sourcesContent":["import { AurumElement, AurumElementProps } from './aurum_element';\nimport { DataSource } from '../stream/data_source';\nimport { DataDrain, StringSource } from '../utilities/common';\n\nexport interface TextAreaProps extends AurumElementProps {\n\tonAttach?: (node: TextArea) => void;\n\tplaceholder?: StringSource;\n\treadonly?: StringSource;\n\tdisabled?: StringSource;\n\tonChange?: DataDrain<InputEvent>;\n\tonInput?: DataDrain<InputEvent>;\n\tinputValueSource?: DataSource<string>;\n\tinitialValue?: string;\n}\n\nexport class TextArea extends AurumElement {\n\tpublic node: HTMLTextAreaElement;\n\n\tpublic onChange: DataSource<InputEvent>;\n\tpublic onInput: DataSource<InputEvent>;\n\n\tconstructor(props: TextAreaProps) {\n\t\tsuper(props, 'textArea');\n\t\tif (props.inputValueSource) {\n\t\t\tthis.node.value = props.initialValue ?? props.inputValueSource.value ?? '';\n\t\t\tprops.inputValueSource.unique().listen((value) => (this.node.value = value), this.cancellationToken);\n\t\t} else {\n\t\t\tthis.node.value = props.initialValue ?? '';\n\t\t}\n\t\tthis.bindProps(['placeholder', 'readonly', 'disabled'], props);\n\t\tthis.createEventHandlers(['input', 'change'], props);\n\n\t\tif (props.inputValueSource) {\n\t\t\tthis.onInput.map((p) => this.node.value).pipe(props.inputValueSource);\n\t\t}\n\t}\n}\n"]}