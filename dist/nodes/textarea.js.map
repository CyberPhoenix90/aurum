{"version":3,"file":"textarea.js","sourceRoot":"","sources":["../../src/nodes/textarea.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAgC,MAAM,yBAAyB,CAAC;AAgCrF,MAAM,cAAc,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC;AAKhE,MAAM,aAAa,GAAG;IACrB,aAAa;IACb,UAAU;IACV,UAAU;IACV,MAAM;IACN,MAAM;IACN,cAAc;IACd,WAAW;IACX,KAAK;IACL,WAAW;IACX,KAAK;IACL,WAAW;IACX,UAAU;IACV,MAAM;CACN,CAAC;AAKF,MAAM,OAAO,QAAS,SAAQ,YAAY;IAGzC,YAAY,KAAoB,EAAE,QAAqB;;QACtD,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QACnC,IAAI,KAAK,KAAK,IAAI,EAAE;YACnB,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,KAAK,eAAG,KAAK,CAAC,YAAY,uCAAI,KAAK,CAAC,gBAAgB,CAAC,KAAK,yCAAI,EAAE,EAAA,CAAC;gBAC3E,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;aAC7E;iBAAM;gBACN,IAAI,CAAC,IAAI,CAAC,KAAK,SAAG,KAAK,CAAC,YAAY,uCAAI,EAAE,EAAA,CAAC;aAC3C;YACD,IAAI,CAAC,SAAS,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;YACrC,IAAI,CAAC,mBAAmB,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAEhD,IAAI,KAAK,CAAC,gBAAgB,EAAE;gBAC3B,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE;oBACxC,KAAK,CAAC,gBAAgB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;aACH;SACD;IACF,CAAC;CACD","sourcesContent":["import { AurumElement, AurumElementProps, ChildNode } from './special/aurum_element';\nimport { DataSource } from '../stream/data_source';\nimport { DataDrain, Callback, AttributeValue } from '../utilities/common';\n\nexport interface TextAreaProps extends AurumElementProps {\n\tonAttach?: Callback<HTMLTextAreaElement>;\n\tonDetach?: Callback<HTMLTextAreaElement>;\n\tonCreate?: Callback<HTMLTextAreaElement>;\n\n\tplaceholder?: AttributeValue;\n\treadonly?: AttributeValue;\n\tdisabled?: AttributeValue;\n\tonChange?: DataDrain<InputEvent>;\n\tonInput?: DataDrain<InputEvent>;\n\tinputValueSource?: DataSource<string>;\n\tinitialValue?: string;\n\n\trows?: AttributeValue;\n\twrap?: AttributeValue;\n\tautocomplete?: AttributeValue;\n\tautofocus?: AttributeValue;\n\tmax?: AttributeValue;\n\tmaxLength?: AttributeValue;\n\tmin?: AttributeValue;\n\tminLength?: AttributeValue;\n\trequired?: AttributeValue;\n\ttype?: AttributeValue;\n}\n\n/**\n * @internal\n */\nconst textAreaEvents = { input: 'onInput', change: 'onChange' };\n\n/**\n * @internal\n */\nconst textAreaProps = [\n\t'placeholder',\n\t'readonly',\n\t'disabled',\n\t'rows',\n\t'wrap',\n\t'autocomplete',\n\t'autofocus',\n\t'max',\n\t'maxLength',\n\t'min',\n\t'minLength',\n\t'required',\n\t'type'\n];\n\n/**\n * @internal\n */\nexport class TextArea extends AurumElement {\n\tpublic node: HTMLTextAreaElement;\n\n\tconstructor(props: TextAreaProps, children: ChildNode[]) {\n\t\tsuper(props, children, 'textArea');\n\t\tif (props !== null) {\n\t\t\tif (props.inputValueSource) {\n\t\t\t\tthis.node.value = props.initialValue ?? props.inputValueSource.value ?? '';\n\t\t\t\tprops.inputValueSource.unique().listen((value) => (this.node.value = value));\n\t\t\t} else {\n\t\t\t\tthis.node.value = props.initialValue ?? '';\n\t\t\t}\n\t\t\tthis.bindProps(textAreaProps, props);\n\t\t\tthis.createEventHandlers(textAreaEvents, props);\n\n\t\t\tif (props.inputValueSource) {\n\t\t\t\tthis.node.addEventListener('input', () => {\n\t\t\t\t\tprops.inputValueSource.update(this.node.value);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n"]}