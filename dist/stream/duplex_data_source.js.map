{"version":3,"file":"duplex_data_source.js","sourceRoot":"","sources":["../../src/stream/duplex_data_source.ts"],"names":[],"mappings":"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","sourcesContent":["import { CancellationToken } from '../utilities/cancellation_token';\nimport { Callback } from '../utilities/common';\nimport { EventEmitter } from '../utilities/event_emitter';\nimport { DataSource } from './data_source';\n\nexport enum DataFlow {\n\tUPSTREAM,\n\tDOWNSTREAM\n}\n\n/**\n * Same as DataSource except data can flow in both directions\n */\nexport class DuplexDataSource<T> {\n\t/**\n\t * The current value of this data source, can be changed through update\n\t */\n\tpublic value: T;\n\n\tprivate updating: boolean;\n\tprivate updateDownstreamEvent: EventEmitter<T>;\n\tprivate updateUpstreamEvent: EventEmitter<T>;\n\n\tconstructor(initialValue?: T) {\n\t\tthis.value = initialValue;\n\t\tthis.updateDownstreamEvent = new EventEmitter();\n\t\tthis.updateUpstreamEvent = new EventEmitter();\n\t}\n\n\t/**\n\t * Makes it possible to have 2 completely separate data flow pipelines for each direction\n\t * @param downStream stream to pipe downstream data to\n\t * @param upstream  stream to pipe upstream data to\n\t */\n\tpublic static fromTwoDataSource<T>(downStream: DataSource<T>, upstream: DataSource<T>, initialValue?: T) {\n\t\tconst result = new DuplexDataSource<T>(initialValue);\n\t\t//@ts-ignore\n\t\tresult.updateDownstreamEvent = downStream.updateEvent;\n\t\t//@ts-ignore\n\t\tresult.updateUpstreamEvent = upstream.updateEvent;\n\t}\n\n\t/**\n\t * Allows creating a duplex stream that blocks data in one direction. Useful for plugging into code that uses two way flow but only one way is desired\n\t * @param direction direction of the dataflow that is allowed\n\t */\n\tpublic static createOneWay<T>(direction: DataFlow = DataFlow.DOWNSTREAM, initialValue?: T): DuplexDataSource<T> {\n\t\treturn new DuplexDataSource(initialValue).oneWayFlow(direction);\n\t}\n\t/**\n\t * Updates the value in the data source and calls the listen callback for all listeners\n\t * @param newValue new value for the data source\n\t */\n\tpublic updateDownstream(newValue: T): void {\n\t\tif (this.updating) {\n\t\t\tthrow new Error(\n\t\t\t\t'Problem in datas source: Unstable value propagation, when updating a value the stream was updated back as a direct response. This can lead to infinite loops and is therefore not allowed'\n\t\t\t);\n\t\t}\n\t\tthis.updating = true;\n\t\tthis.value = newValue;\n\t\tthis.updateDownstreamEvent.fire(newValue);\n\t\tthis.updating = false;\n\t}\n\n\t/**\n\t * Updates the value in the data source and calls the listen callback for all listeners\n\t * @param newValue new value for the data source\n\t */\n\tpublic updateUpstream(newValue: T): void {\n\t\tif (this.updating) {\n\t\t\tthrow new Error(\n\t\t\t\t'Problem in datas source: Unstable value propagation, when updating a value the stream was updated back as a direct response. This can lead to infinite loops and is therefore not allowed'\n\t\t\t);\n\t\t}\n\t\tthis.updating = true;\n\t\tthis.value = newValue;\n\t\tthis.updateUpstreamEvent.fire(newValue);\n\t\tthis.updating = false;\n\t}\n\n\t/**\n\t * Same as listen but will immediately call the callback with the current value first\n\t * @param callback Callback to call when value is updated\n\t * @param cancellationToken Optional token to control the cancellation of the subscription\n\t * @returns Cancellation callback, can be used to cancel subscription without a cancellation token\n\t */\n\tpublic listenAndRepeat(callback: Callback<T>, cancellationToken?: CancellationToken): Callback<void> {\n\t\tcallback(this.value);\n\t\treturn this.listen(callback, cancellationToken);\n\t}\n\n\t/**\n\t * Subscribes to the updates of the data stream\n\t * @param callback Callback to call when value is updated\n\t * @param cancellationToken Optional token to control the cancellation of the subscription\n\t * @returns Cancellation callback, can be used to cancel subscription without a cancellation token\n\t */\n\tpublic listen(callback: Callback<T>, cancellationToken?: CancellationToken): Callback<void> {\n\t\tthis.updateDownstreamEvent.subscribe(callback, cancellationToken).cancel;\n\t\treturn this.updateUpstreamEvent.subscribe(callback, cancellationToken).cancel;\n\t}\n\n\t/**\n\t * Subscribes exclusively to updates of the data stream that occur due to an update flowing upstream\n\t * @param callback Callback to call when value is updated\n\t * @param cancellationToken Optional token to control the cancellation of the subscription\n\t * @returns Cancellation callback, can be used to cancel subscription without a cancellation token\n\t */\n\tpublic listenUpstream(callback: Callback<T>, cancellationToken?: CancellationToken): Callback<void> {\n\t\treturn this.updateUpstreamEvent.subscribe(callback, cancellationToken).cancel;\n\t}\n\n\t/**\n\t * Subscribes exclusively to updates of the data stream that occur due to an update flowing downstream\n\t * @param callback Callback to call when value is updated\n\t * @param cancellationToken Optional token to control the cancellation of the subscription\n\t * @returns Cancellation callback, can be used to cancel subscription without a cancellation token\n\t */\n\tpublic listenDownstream(callback: Callback<T>, cancellationToken?: CancellationToken): Callback<void> {\n\t\treturn this.updateDownstreamEvent.subscribe(callback, cancellationToken).cancel;\n\t}\n\n\t/**\n\t * Creates a new datasource that listenes to updates of this datasource but only propagates the updates from this source if they pass a predicate check\n\t * @param callback predicate check to decide if the update from the parent data source is passed down or not\n\t * @param cancellationToken  Cancellation token to cancel the subscriptions added to the datasources by this operation\n\t */\n\tpublic filter(downStreamFilter: (value: T) => boolean, upstreamFilter?: (value: T) => boolean, cancellationToken?: CancellationToken): DuplexDataSource<T> {\n\t\tif (!upstreamFilter) {\n\t\t\tupstreamFilter = downStreamFilter;\n\t\t}\n\n\t\tconst filteredSource = new DuplexDataSource<T>();\n\t\tthis.listenDownstream((newVal) => {\n\t\t\tif (downStreamFilter(newVal)) {\n\t\t\t\tfilteredSource.updateDownstream(newVal);\n\t\t\t}\n\t\t}, cancellationToken);\n\n\t\tfilteredSource.listenUpstream((newVal) => {\n\t\t\tif ((upstreamFilter ?? downStreamFilter)(newVal)) {\n\t\t\t\tthis.updateUpstream(newVal);\n\t\t\t}\n\t\t}, cancellationToken);\n\n\t\treturn filteredSource;\n\t}\n\n\t/**\n\t * Forwards all updates from this source to another\n\t * @param targetDataSource datasource to pipe the updates to\n\t * @param cancellationToken  Cancellation token to cancel the subscriptions added to the datasources by this operation\n\t */\n\tpublic pipe(targetDataSource: DuplexDataSource<T>, cancellationToken?: CancellationToken): void {\n\t\tthis.listenDownstream((newVal) => targetDataSource.updateDownstream(newVal), cancellationToken);\n\t\ttargetDataSource.listenUpstream((newVal) => this.updateUpstream(newVal), cancellationToken);\n\t}\n\n\t/**\n\t * Creates a new datasource that is listening to updates from this datasource and transforms them with a mapper function before fowarding them to itself\n\t * @param mapper mapper function that transforms the data when it flows downwards\n\t * @param reverseMapper mapper function that transforms the data when it flows upwards\n\t * @param cancellationToken  Cancellation token to cancel the subscriptions added to the datasources by this operation\n\t */\n\tpublic map<D>(mapper: (value: T) => D, reverseMapper: (value: D) => T, cancellationToken?: CancellationToken): DuplexDataSource<D> {\n\t\tconst mappedSource = new DuplexDataSource<D>(mapper(this.value));\n\n\t\tthis.listenDownstream((v) => mappedSource.updateDownstream(mapper(v)), cancellationToken);\n\t\tmappedSource.listenUpstream((v) => this.updateUpstream(reverseMapper(v)), cancellationToken);\n\n\t\treturn mappedSource;\n\t}\n\n\t/**\n\t * Creates a new datasource that listens to this one and forwards updates if they are not the same as the last update\n\t * @param cancellationToken  Cancellation token to cancel the subscription the new datasource has to this datasource\n\t */\n\tpublic unique(cancellationToken?: CancellationToken): DuplexDataSource<T> {\n\t\tconst uniqueSource = new DuplexDataSource<T>(this.value);\n\n\t\tthis.listenDownstream((v) => {\n\t\t\tif (uniqueSource.value !== v) {\n\t\t\t\tuniqueSource.updateDownstream(v);\n\t\t\t}\n\t\t}, cancellationToken);\n\n\t\tuniqueSource.listenUpstream((v) => {\n\t\t\tif (this.value !== v) {\n\t\t\t\tthis.updateUpstream(v);\n\t\t\t}\n\t\t}, cancellationToken);\n\n\t\treturn uniqueSource;\n\t}\n\n\t/**\n\t * Allows flow of data only in one direction\n\t * @param direction direction of the dataflow that is allowed\n\t * @param cancellationToken  Cancellation token to cancel the subscriptions the new datasource has to the two parent datasources\n\t */\n\tpublic oneWayFlow(direction: DataFlow = DataFlow.DOWNSTREAM, cancellationToken?: CancellationToken): DuplexDataSource<T> {\n\t\tconst oneWaySource = new DuplexDataSource(this.value);\n\n\t\tif (direction === DataFlow.DOWNSTREAM) {\n\t\t\tthis.listenDownstream((v) => oneWaySource.updateDownstream(v), cancellationToken);\n\t\t\toneWaySource.updateUpstream = () => void 0;\n\t\t} else {\n\t\t\toneWaySource.listenUpstream((v) => this.updateUpstream(v));\n\t\t\toneWaySource.updateDownstream = () => void 0;\n\t\t}\n\n\t\treturn oneWaySource;\n\t}\n\n\t/**\n\t * Remove all listeners\n\t */\n\tpublic cancelAll(): void {\n\t\tthis.updateDownstreamEvent.cancelAll();\n\t\tthis.updateUpstreamEvent.cancelAll();\n\t}\n}\n"]}